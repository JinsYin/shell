{"./":{"url":"./","title":"简介","keywords":"","body":"Shell Shell 意为 壳（Kernel 意为 核），是一种特殊用途的程序，用于读取用户输入的命令以执行相应的程序，所以有时也称为 命令解释器，同时也是编程语言。 分类 Unix/Unix-like 系统中主要有三类 Shell （各自还有子分类）： 分类 子分类 命令提示符 Bourne shell (sh) Korn shell (ksh) Bourne Again shell (bash) * POSIX shell (sh) $ C shell (csh) * TENEX/TOPS C shell (tcsh) - BSD % Z shell (zsh) ~ % Bourne shell 是第一个出现在 Unix 系统中的 shell，所以被称为标准的 shell 。 配置文件 ~/.profile ~/.bash_profile ~/.bashrc ~/.zshrc shell 配置文件优先级 sh * ~/.profile bash 1. ~/.bash_profile 2. ~/.profile Login Shell Login shell 是指用户刚登录系统时，由系统创建、用来运行 shell 命令（即执行相应程序）的进程。对 Unix/Unix-like 系统而言，shell 仅仅是一个用户进程。 # 查看系统可用的 Login Shell（macOS） $ cat /etc/shells /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh 执行方式 启动子进程 sub-shell 执行命令或脚本；如：在脚本开头指定 #!/bin/sh 以及命令行运行的各种命令（包括 exec 等命令） 在当前 shell 进程中执行脚本；如：source x.sh 执行 exec 系统调用以新进程代替原进程，但进程 PID 保持不变，如：在脚本中指定 exec $@ 工作环境 Login shell：先读取 /etc/profile 文件，然后读取 ~/.bash_profile 文件 non-login shell：读取 ~/.bashrc Shell 内置命令 Bourne Shell Builtins Bash Builtin Commands LICENSE 参考 Shell Builtin Commands Guide to Unix/Explanations/Choice of Shell Zsh 和 Bash 究竟有何不同 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"sh/builtin-cmds/":{"url":"sh/builtin-cmds/","title":"builtin-cmds","keywords":"","body":"sh 内置命令 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"sh/shell.html":{"url":"sh/shell.html","title":"Linux Shell","keywords":"","body":"Linux Shell Shell 类型 Bash Zsh 命名规范 脚本命名： start-namenode.sh 函数命名： 首字母大写， CreateFile() 关键字 $ # 假设运行以下脚本 $ ./run-script.sh user 123456 $$: 返回执行当前脚本时的 PID，cat /var/run/run-script.sh.pid $*: 返回脚本后传递的参数，如：\"user 123456\" $@: 返回脚本后传递的参数, 如：\"user\" \"123456\" * `${@: 2}`：从第 2 个开始的全部参数 * `${@: 3:2}`：从第 3 个参数开始，共计 2 个参数 * `${@: -1:1}`：最后一个参数 $#: 返回参数个数，如：2 $0: 既然$1返回第一个参数，$0 自然就返回脚本的文件名, 如：\"run-script.sh\" $?: 获取上一个命令的返回（ return） 值/退出（ exit ）状态（0 表示 success，非零表示 failure） $ cat run-script.sh #!/bin/sh # 定义函数 Hello () { echo \"Hello World $1 $2\" echo $* echo $@ return 10 } # 调用该函数 Hello Zara Ali # 获取上一个命令的返回值 ret=$? # 10 echo \"Return value is $ret\" exit、return exit 会退出当前脚本，return 只是结束了当前函数。相同的是，无论是返回值还是退出状态都是数字。 #!/bin/bash retfunc() { echo \"this is retfunc()\" return 1 } exitfunc() { echo \"this is exitfunc()\" exit 1 } retfunc echo \"We are still here\" exitfunc echo \"We will never see this\" set 命令 含义 set -e 或 set -o errexit 如果 return 或 exit 传递的只是非零，则退出脚本 退出状态码（exit code） http://tldp.org/LDP/abs/html/exitcodes.html http://tldp.org/LDP/abs/html/exit-status.html 关键字 if 注意参数对应的是 文件（目录也是文件）、数字 还是 字符串，以及 [] 之间的空格。 处理文件: if [ -f FILE ] fi; # 若文件存在， 则返回 true（支持正则） if [ -e FILE ] fi; # 若文件存在， 则返回 true（不支持正则） if [ -r FILE ] fi; # 若文件可读（readable），则返回 true if [ -w FILE ] fi; # 若文件可读（writable），则返回 true if [ -x FILE ] fi; # 若文件可执行（executable），则返回 true if [ -s FILE ] fi; # 若文件大小大于 0（sized）, 即文件不为空，则返回 true if [ ! -s FILE ] fi; # 若文件为空，则返回 true。这里很容易与 -z 混淆 处理整数: # NUM1 和 NUM2 都是整数，不可以是小数 if [ NUM1 OP NUM2 ] fi; # OP 可以是 -eq、-ne、-lt、-le、-gt、-eg 处理字符串: # STRING1 和 STRING2 都是字符串 if [ STRING1 == STRING2 ] fi; # 若两个字符串相等，则返回 true if [ STRING1 != STRING2 ] fi; # 若两个字符串不相等，则返回 true if [ STRING1 > STRING2 ] fi； # 若字符串STRING1大于STRING，则返回 true if [ STRING1 处理表达式: $ if [ ! EXPR ] fi; # 若表达式为 false, 则返回 true $ if [ ( EXPR ) ]; fi; # 若表达式的值为 false, 则返回 true $ if [ \\( EXPR1 \\) -a \\( EXPR2 \\) ] fi; # 若表达式 EXPR1 和表达式 EXPR2 皆为 true, 则返回 true $ if [ ( EXPR1 ) ] && [ ( EXPR2 ) ]; fi # 同上 $ if [ \\( EXPR1 \\) -o \\( EXPR2 \\) ] fi; # 若表达式 EXPR1 或表达式 EXPR 为 true, 则返回 true $ if [ ( EXPR1 ) ] || [ ( EXPR2 ) ]; fi # 同上 默认值 := : ${VARIABLE:=DEFAULT_VALUE} 表示如果 VARIABLE 变量不存在的话，将 DEFAULT_VALUE 的值赋值个 VARIABLE 变量。 $ DEFAULT_VALUE=\"123\" $ echo \"x=$x\" x= # 冒号表示这是一个设置默认值的命令 $ : ${x:=$DEFAULT_VALUE} $ echo \"x=$x\" x=123 $ : ${x:=\"456\"} $ echo \"x=$x\" x=123 常见的示例： # 把 666 赋值给 VARIABLE，再把 VARIABLE 赋值给 FOO $ FOO=${VARIABLE:=\"666\"} :- VARIABLE3=${VARIABLE2:-$VARIABLE1} 表示如果 VARIABLE2 不存在的话，将 VARIABLE1 的值赋值给 VARIABLE3，否则将 VARIABLE2 的只赋值给 VARIABLE3，另外，VARIABLE1 不会赋值给 VARIABLE2。 $ vi defvalue.sh #!/bin/bash variable1=$1 variable2=${2:-$variable1} echo $variable1 echo $variable2 $ ./defvalue.sh first-value second-value first-value second-value $ ./defvalue.sh first-value first-value first-value eval eval 可调用脚本中的函数。 $ cat x.sh #!/bin/bash fx() { echo \"Hello, world\" } eval $@ 脚本外执行 fx 函数。 % x.sh fx 工具 ShellCheck 参考 Bash 指南 - 条件语句 shell 编程规范 Assigning default values to shell variables with a single command in bash Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"sh/variables/":{"url":"sh/variables/","title":"variables","keywords":"","body":"sh 变量 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"bash/":{"url":"bash/","title":"bash","keywords":"","body":"Bash 快捷键 快捷键 描述 Tab 自动补全命令 Ctrl + R 搜索命令行历史 重复按下 Ctrl + R 将 向后查找 匹配项 按下 Enter 键将执行当前匹配的命令 * 按下右键会将匹配项放入当前命令行中，以作修改 Ctrl + U 删除当前光标到行首之间的内容 Ctrl + K 删除当前光标到行尾之间的内容 Ctrl + A 将光标移至行首 Ctrl + E 将光标移至行尾 Ctrl + L 清屏但保留当前命令行的内容 Ctrl + W 删除键入的最后一个单词 Ctrl+X Ctrl+E 打开默认编辑器（export EDITOR=vim）编辑当前输入的命令，常用于编辑长命令 Control-C（^C） ^C 使终端发出一个 SIGINT 信号（即中断 “interupt” 信号）给当前前台进程，默认将转换为终止应用程序。 Control-D（^D） ^D 使终端发出一个文件结束符 EOF 信号给当前前台进程的标准输入（stdin）。默认只在一行的开头起作用，如果希望在行中或行末起作用，需要按两下。 更多快捷键：man readline（Linux） 特殊 !!: 上一条命令或者最近一条命令 !ls：最近一条以 ls 开头的命令 !520：执行 history 编号为 520 的命令 参考 Bash Reference Manual Bash Guide for Beginners 命令行的艺术 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"bash/builtin-cmds/":{"url":"bash/builtin-cmds/","title":"builtin-cmds","keywords":"","body":"Bash 内置命令 # bash $ man builtin builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break, breaksw, builtins, case, cd, chdir, command, complete, continue, default, dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval, exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts, glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit, local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd, printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set, setenv, settc, setty, setvar, shift, source, stop, suspend, switch, telltc, test, then, time, times, trap, true, type, ulimit, umask, unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait, where, which, while -- shell built-in commands Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"bash/features/":{"url":"bash/features/","title":"features","keywords":"","body":"Bash 功能 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"bash/installation/":{"url":"bash/installation/","title":"installation","keywords":"","body":"Bash 安装 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"bash/variables/":{"url":"bash/variables/","title":"variables","keywords":"","body":"Bash 变量 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/":{"url":"zsh/","title":"zsh","keywords":"","body":"Zsh 内置命令 $ man zshbuiltins 目录 安装 zsh Oh My Zsh - 管理 zsh 配置的框架 优势 Tab 自动补全的同时支持转换大小写，如 cd ~/down -> cd ~/Downloads/ 参考 github.com/robbyrussell/oh-my-zsh 文本三巨头：zsh、tmux 和 vim 增强你的 bash，提高命令效率之终极利器 oh-my-zsh Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/cmd/":{"url":"zsh/cmd/","title":"cmds","keywords":"","body":"ZSH 命令 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/cmd/d.html":{"url":"zsh/cmd/d.html","title":"d","keywords":"","body":"d 查看最近访问的目录，通过键入数字并回车即可返回到历史目录。 实现 d () { if [[ -n $1 ]] then dirs \"$@\" else dirs -v | head -10 fi } 示例 yin@Yin:~ $ yin@Yin:~ $ cd Downloads yin@Yin:~/Downloads $ yin@Yin:~/Downloads $ d 0 ~/Downloads 1 ~ yin@Yin:~/Downloads $ 1 ~ yin@Yin:~ $ Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/cmd/take.html":{"url":"zsh/cmd/take.html","title":"take","keywords":"","body":"take 实现 $ which take take () { mkdir -p $@ && cd ${@:$#} } Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/cmd/zsh_stats.html":{"url":"zsh/cmd/zsh_stats.html","title":"zsh","keywords":"","body":"zsh_stats 查询使用频率前 20 的命令 实现 $ which zsh_stats zsh_stats () { fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl | head -n20 } 示例 $ Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/installation.html":{"url":"zsh/installation.html","title":"安装 zsh","keywords":"","body":"安装 zsh # Ubuntu $ sudo apt-get install -y zsh # CentOS $ sudo yum install -y zsh # MacOS $ brew install zsh 系统级配置目录：/etc/zsh/ 用户级配置文件：~/.zshrc 用户级历史命令：~/.zsh_hisotry Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/":{"url":"zsh/oh-my-zsh/","title":"oh-my-zsh","keywords":"","body":"Oh My Zsh Oh-My-Zsh 是一个 Zsh 的配置管理框架（包括主题管理和插件管理），内置了大量插件和主题以及一个自动更新工具。 目录 Issue 进入 Git 仓库目录存在卡顿问题 - 原因是 oh-my-zsh 需要获取 Git 更新信息 # 设置 oh-my-zsh 不读取文件变化信息 $ git config --global --add oh-my-zsh.hide-dirty 1 # 甚之：禁止 oh-my-zsh 自动获取 Git 信息 $ git config --global --add oh-my-zsh.hide-dirty 1 参考 github.com/robbyrussell/oh-my-zsh Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/configuration.html":{"url":"zsh/oh-my-zsh/configuration.html","title":"Oh-my-zsh 配置","keywords":"","body":"Oh-my-zsh 配置 $ vi ~/.zshrc 配置项 描述 DISABLE_AUTO_UPDATE 更新提示： 默认情况下，当 Oh-my-zsh 有更新时，会有提示。 $ vi ~/.zshrc DISABLE_UPDATE_PROMPT=true Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/installation.html":{"url":"zsh/oh-my-zsh/installation.html","title":"安装 Oh-my-zsh","keywords":"","body":"安装 Oh-my-zsh 安装 $ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 配置目录：~/.oh-my-zsh/（$ZSH 环境变量的值） 内置主题目录：~/.oh-my-zsh/themes/ 内置插件目录：~/.oh-my-zsh/plugins/ 定制目录：$ZSH_CUSTOM（~/.oh-my-zsh/custom） 定制主题目录：$ZSH_CUSTOM/themes/ 定制插件目录：$ZSH_CUSTOM/plugins/ 更新 手动更新： $ upgrade_oh_my_zsh 卸载 $ uninstall_oh_my_zsh zsh Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/":{"url":"zsh/oh-my-zsh/plugins/","title":"plugins","keywords":"","body":"Oh-My-Zsh 插件 插件 路径 描述 git $ZSH/plugins/git/git.plugin.zsh Git 别名、分支信息 extract $ZSH/plugins/extract/extract.plugin.zsh 使用 x 命令可以一键解压所有类型的压缩文件 autojump colored-man colorize copydir command-not-found history sublime brew osx z 添加插件 $ vi ~/.zshrc ... plugins=( git ) ... $ source ~/.zshrc 插件原理 Oh-my-zsh 的插件本质上是一个 zsh shell 脚本，位于 $ZSH/plugins/$plugin/$plugin.plugin.zsh。 $ cat ~/.zshrc ... export ZSH=\"/home/yin/.oh-my-zsh\" ZSH_THEME=\"agnoster\" plugins=(git ...) source $ZSH/oh-my-zsh.sh ... $ cat $ZSH/oh-my-zsh.sh ... if [[ -z \"$ZSH_CUSTOM\" ]]; then ZSH_CUSTOM=\"$ZSH/custom\" fi ... # Load all of the plugins that were defined in ~/.zshrc for plugin ($plugins); do if [ -f $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh ]; then source $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh elif [ -f $ZSH/plugins/$plugin/$plugin.plugin.zsh ]; then source $ZSH/plugins/$plugin/$plugin.plugin.zsh fi done ... Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/autojump.html":{"url":"zsh/oh-my-zsh/plugins/autojump.html","title":"Autojump 插件","keywords":"","body":"Autojump 插件 Autojump 是一个导航文件系统的快捷方式，其工作原理是从命令行维护最常使用的目录的数据库。必须首先访问目录，才能跳转目录。 安装 $ git clone git://github.com/joelthelion/autojump.git $ cd autojump && ./install.py 配置 添加以下内容到 ~/.zshrc 或 ~/.bashrc： [[ -s /home/yin/.autojump/etc/profile.d/autojump.sh ]] && source /home/yin/.autojump/etc/profile.d/autojump.sh 示例 参考 github.com/wting/autojump Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/git-open.html":{"url":"zsh/oh-my-zsh/plugins/git-open.html","title":"git-open","keywords":"","body":"git-open 终端键入该命令后会在浏览器打开当前项目的远程仓库地址。 安装 $ git clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/history.html":{"url":"zsh/oh-my-zsh/plugins/history.html","title":"history 插件","keywords":"","body":"history 插件 实现 $ cat $ZSH/plugins/history/history.plugin.zsh alias h='history' function hs { history | grep $* } alias hsi='hs -i' 用法 $ h $ hs cd # 搜索 cd 相关的历史命令 使 history 命令显示时间格式 $ vi ~/.zshrc ... HIST_STAMPS=\"yyyy-mm-dd\" ... Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/z.html":{"url":"zsh/oh-my-zsh/plugins/z.html","title":"z","keywords":"","body":"z z 是一个类似与 autojump 的内置插件 不同与 autojump # 删除无效路径 $ z -x Tab 联想 $ z 显示所有目录 $ z 12 /home/yin/git 24 /home/yin/git/autojump 48 /opt 88 /home/yin/Documents 128 /home/yin/Downloads Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/zsh-autosuggestions.html":{"url":"zsh/oh-my-zsh/plugins/zsh-autosuggestions.html","title":"zsh-autosuggestions","keywords":"","body":"zsh-autosuggestions 安装 $ git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 用法 自定义补全快捷键 默认使用 → 来完成补全，自定义： $ vi ~/.zshrc bindkey '^' autosuggest-accept $ source ~/.zshrc 参考 github.com/zsh-users/zsh-autosuggestions Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/plugins/zsh-syntax-highlighting.html":{"url":"zsh/oh-my-zsh/plugins/zsh-syntax-highlighting.html","title":"zsh-syntax-highlighting","keywords":"","body":"zsh-syntax-highlighting 命令输入正常则显示为绿色，否则显示红色。 安装 $ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/themes/":{"url":"zsh/oh-my-zsh/themes/","title":"themes","keywords":"","body":"Oh-My-Zsh 主题 主题 描述 robbyrussell 默认主题 agnoster 主题原理 Oh-my-zsh 的主题本质上同样是一个 shell 脚本，位于 $ZSH/themes/$ZSH_THEME.zsh-theme。 $ cat $ZSH/oh-my-zsh.sh ... if [[ -z \"$ZSH_CUSTOM\" ]]; then ZSH_CUSTOM=\"$ZSH/custom\" fi ... if [ ! \"$ZSH_THEME\" = \"\" ]; then if [ -f \"$ZSH_CUSTOM/$ZSH_THEME.zsh-theme\" ]; then source \"$ZSH_CUSTOM/$ZSH_THEME.zsh-theme\" elif [ -f \"$ZSH_CUSTOM/themes/$ZSH_THEME.zsh-theme\" ]; then source \"$ZSH_CUSTOM/themes/$ZSH_THEME.zsh-theme\" else source \"$ZSH/themes/$ZSH_THEME.zsh-theme\" fi fi ... 设置主题 $ cat ~/.zshrc ... ZSH_THEME=\"agnoster\" ... $ source ~/.zshrc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"zsh/oh-my-zsh/themes/agnoster.html":{"url":"zsh/oh-my-zsh/themes/agnoster.html","title":"Agnoster 主题","keywords":"","body":"Agnoster 主题 Powerline 字体 安装字体 # clone $ git clone https://github.com/powerline/fonts.git --depth=1 # install $ cd fonts && ./install.sh # clean-up $ cd .. && rm -rf fonts 设置终端主题 iTerm2 【iTerm2】 -> 【Preferences...】 -> 【Profiles】 -> 【Colors】 -> 【Color Presets...】 -> 【Solarized Dark】 MacOS Terminal # 下载后双击安装 Solarized Dark 主题 $ git clone https://raw.githubusercontent.com/altercation/solarized/master/osx-terminal.app-colors-solarized/Solarized%20Dark%20ansi.terminal 【Terminal】 -> 【Preferences...】 -> 【Profiles】 -> 设置【Solarized Dark】为默认主题 更改终端字体 Gnome Terminal 【Edit】 -> 【Profiles...】 -> 【Edit】 -> 取消【Use the system fixed width font】 -> 选择【Ubuntu Mono derivative Powerline | 13】或【Noto Mono for Powerline | 11】等字体及大小 iTerm2 【iTerm2】 -> 【Preferences...】 -> 【Profiles】 -> 【Text】 -> 【Font】 -> 选择【Cousine for Powerline】或【Roboto Mono for Powerline】等字体（默认字体是 ”Monaco“） MacOS Terminal 【Terminal】 -> 【Preferences...】 -> 【Profiles】 -> 选择默认主题 -> 【Text】 -> 【Font】 -> 【Change...】 -> 【Noto Mono for Powerline】或【Roboto Mono for Powerline】等字体 测试字体 $ echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\" Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/":{"url":"cmd/","title":"Linux 命令行","keywords":"","body":"Linux 命令行 输出打印 echo、cat、nl、exec、wc -l 、split、xargs、tee nl，为每行文本显示行号 % nl x.md 环境变量 set、env、export 文本过滤 grep、sed(tr)、awk 资源管理 top、free、df、du、fdisk free，查看内存容量 # -b: B, -k: KB, -m: MB, -g: GB， -h: Human $ free -m 进程管理 pgrep、ps、netstat、systemd(upstart)、supervisor pgrep、lsof, 获取进程 pid # 通过 /var/run/ 目录下的进程名获取 pid $ pgrep sshd # 通过端口获取 pid $ lsof -t -i:22 文件权限 chmod、chown 网络资源 iftop, nc(nmap-netcat) cpu 内存 磁盘 磁盘IO 网络IO 远程操作 ssh(sftp、pssh)、scp(pscp)、 rsync(prsync) 系统安全 iptables、firewall-cmd、ufw、selinux、apparmor LXC (Linux Container) cgroups、namespace 参考 List of Unix commands The art of command line Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/SUMMARY.html":{"url":"cmd/SUMMARY.html","title":"SUMMARY","keywords":"","body":"SUMMARY 命令本身 alias exec history type command xargs su sudo nano vi awk cut diff head more sed sort tail tr uniq wc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/alias.html":{"url":"cmd/alias.html","title":"alias","keywords":"","body":"alias Linux 的 alias 可以用于临时设置别名，如果需要别名永久生效，可以将别名添加到 ~/.bashrc 文件中。 命令 # 查看别名 $ alias # 设置别名 $ alias ll='ls -alF' # 删除别名 $ unalias 永久生效 # 直接添加到 “~/.bashrc” 文件中 $ echo \"alias ll='ls -alF'\" >> ~/.bashrc $ source ~/.bashrc # 最好将别名单独添加到 “~/.bash_aliases” 文件中（“~/.bashrc” 中引用了 “~/.bash_aliases”） $ echo \"alias ll='ls -alF'\" >> ~/.bash_aliases $ source ~/.bashrc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/alias/":{"url":"cmd/alias/","title":"alias","keywords":"","body":"Shell 别名 如果希望每次都工作，将其添加到 ~/.zshrc 或 ~/.bashrc 等文件。 alias cp=\"cp -i\" # 防止拷贝时覆盖已存在的文件 alias ll=\"ls -hail\" # -a：显示隐藏文件，-i：inode 编号，-h：可读 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/awk.html":{"url":"cmd/awk.html","title":"awk","keywords":"","body":"awk 定向模式扫描处理语言 用法 awk [ -F fs ] [ -v var=value ] [ 'prog' | -f progfile ] [ file ... ] 选项 选项 描述 -v var=value 设置变量 示例 匹配列 $ ps aux | awk '$8==\"S\"' 设置变量 psstatus() { ps aux | awk -v pattern=$1 '$8==pattern'; }; psstatus \"S\" Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/command.html":{"url":"cmd/command.html","title":"command","keywords":"","body":"command Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/command/fc.html":{"url":"cmd/command/fc.html","title":"fc","keywords":"","body":"fc https://shapeshed.com/unix-fc/ Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/":{"url":"cmd/cprogramming/","title":"cprogramming","keywords":"","body":"C Programming Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/cc-c99.html":{"url":"cmd/cprogramming/cc-c99.html","title":"cc","keywords":"","body":"cc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/cflow.html":{"url":"cmd/cprogramming/cflow.html","title":"cflow","keywords":"","body":"cflow 安装 Ubuntu $ sudo apt-get install cflow Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/ctags.html":{"url":"cmd/cprogramming/ctags.html","title":"ctags","keywords":"","body":"ctags Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/cxref.html":{"url":"cmd/cprogramming/cxref.html","title":"cxref","keywords":"","body":"cxref Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/lex.html":{"url":"cmd/cprogramming/lex.html","title":"lex","keywords":"","body":"lex Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/nm.html":{"url":"cmd/cprogramming/nm.html","title":"nm","keywords":"","body":"nm Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/strings.html":{"url":"cmd/cprogramming/strings.html","title":"strings","keywords":"","body":"strings Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/strip.html":{"url":"cmd/cprogramming/strip.html","title":"strip","keywords":"","body":"strip Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cprogramming/yacc.html":{"url":"cmd/cprogramming/yacc.html","title":"yacc","keywords":"","body":"yacc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/cut.html":{"url":"cmd/cut.html","title":"cut","keywords":"","body":"cut Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/diff.html":{"url":"cmd/diff.html","title":"diff","keywords":"","body":"diff Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/exec.html":{"url":"cmd/exec.html","title":"exec","keywords":"","body":"exec Shell 的内置命令 exec 以新程序替换当前的 shell 程序（进程），但不会创建新的进程（即 PID 不变），运行完毕之后不会回到原先的程序中去。 示例 # 终端 1（Bash shell） # 获取当前 Bash 进程的 PID $ echo $$ 379649 $ exec ping baidu.com # 终端 2（Bash shell） $ pstree -asp 379649 init,1 └─lightdm,1544 └─lightdm,1989 --session-child 12 19 └─init,7579 --user └─gnome-terminal,65053 └─ping,657363 baidu.com # 进程已改变，PID 未改变 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/attr.html":{"url":"cmd/fs/attr.html","title":"attr","keywords":"","body":"attr XFS 文件系统的扩展属性 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/cat.html":{"url":"cmd/fs/cat.html","title":"cat","keywords":"","body":"cat 打印文件的内容到 stdout 参数 参数 描述 -n 输出行号（包括空行） -d 输出行号（不含空行） SEE ALSO tac 示例 将 stdin 作为文件输入 $ cat /tmp/file 1234567890 abcdefghij EOF Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/cd.html":{"url":"cmd/fs/cd.html","title":"cd - 切换工作目录","keywords":"","body":"cd - 切换工作目录 参数 参数 描述 cd ~ 进入 HOME 目录（等同于 cd $HOME） cd - 回到上一个工作目录 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/compress/":{"url":"cmd/fs/compress/","title":"compress","keywords":"","body":"解压缩工具 文件扩展名 描述 *.zip zip *.gz gzip *.bz2 bzip2 *.xz xz *.Z compress *.tar tar 打包文件，未经压缩 *.tar.gz tar 打包文件，经 gz 压缩 *.tar.bz2 tar 打包文件，经 bzip2 压缩 *.tar.xz tar 打包文件，经 xz 压缩 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/compress/bzip2.html":{"url":"cmd/fs/compress/bzip2.html","title":"bzip2","keywords":"","body":"bzip2 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/compress/gzip.html":{"url":"cmd/fs/compress/gzip.html","title":"gzip","keywords":"","body":"gzip Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/compress/tar.html":{"url":"cmd/fs/compress/tar.html","title":"tar","keywords":"","body":"tar Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/compress/xz.html":{"url":"cmd/fs/compress/xz.html","title":"xz","keywords":"","body":"xz Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/dd.html":{"url":"cmd/fs/dd.html","title":"dd","keywords":"","body":"dd 选项 选项 描述 bs=BYTES 同时读写 BYTES 字节；需要注意的是，此处指该程序传输的数据块大小，与扇区或文件系统块无关 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filemode/chmod.html":{"url":"cmd/fs/filemode/chmod.html","title":"chmod","keywords":"","body":"chmod chmod 是 change mode 的缩写，即用于改变文件（常规文件、目录、Socket、字符文件、块文件 ...）的权限（即模式）和访问控制列表（ACL）。 参数 参数 描述 -R 改变所有子文件（包括目录）的权限；慎用之，因为普通文件的权限（通常是 644）往往比目录的权限（通常是 755）低 模式（Mode） 文件模式分为 绝对模式 和 符号模式。 绝对模式 绝对模式是一个八进制数，由下面的一个或多个值之和构成： 模式基本值 描述 4000 2000 1000 0400 允许 “owner” 读 0200 允许 “owner” 写 0100 如果是文件，允许 “owner” 执行； 如果是目录，允许 “owner” 搜索该目录 0040 允许 “组成员” 读 0020 允许 “组成员” 写 0010 如果是文件，允许 “组成员” 执行； 如果是目录，允许 “组成员” 搜索该目录 0004 允许 “其他人” 读 0002 允许 “其他人” 写 0001 如果是文件，允许 “其他人” 执行； 如果是目录，允许 “其他人” 搜索该目录 常用模式解读： 644：允许 “所有用户” 可读，仅允许 “owner” 可写 664：允许 “所有用户” 可读，允许 “owner” 和 “组成员” 可写 755：允许 “所有用户” 可读可执行（或可搜索），仅允许 “owner” 可写 775：允许 “所有用户” 可读可执行（或可搜索），允许 “owner” 和 “组成员” 可写 777：允许 “所有用户” 读写执行（或搜索） 符号模式 符合模式语法描述： mode ::= clause [, clause ...] clause ::= [who ...] [action ...] action action ::= op [perm ...] who ::= a | u | g | o op ::= + | - | = perm ::= r | s | t | w | x | X | u | g | o who 描述 u 指定模式位的用户（user） g 指定模式位的组（groud） o 指定模式位的其他（other）部分 a 等同于 ugo（u + g + o），即所有用户；默认选项 运算（op） 描述 + 增加权限 - 移除权限 = 设置权限 参数（perm） 描述 r 读 s set-user-ID-on-execution 和 set-group-ID-on-execution t sticky w 写 x 执行/搜索 X u 原模式下的用户权限 X 原模式下的组权限 X 原模式下的其他权限 模式解读： +x | a+x：为所有用户增加一个可执行或可搜索权限 理解目录的 “搜索” 权限： 访问目录，如 cd /tmp 查找目录，如 find /tmp -type d 默认文件模式 umask Also umask 示例 分析 ls -l # 第一列：文件类型及文件权限 # 第 1 位：文件类型；'-'：普通文件，'d'：目录，'l'：链接文件，'c'：字符设备，'b'：块设备 # 后 9 位：文件权限；每 3 位代表一类用户的权限，依次是 ’owner权限、组成员权限、其他人权限‘ $ ls -l -rwxr-xr-x 1 in staff 0 7 13 18:40 b.txt drwxr-xr-x 5 in staff 160 7 11 21:35 c 对子文件设置不同的权限 -R 选项会改变所有子文件（包括目录）的权限，但通常我们希望目录和其他文件拥有不同的权限。 $ find . -type d -exec chmod 755 {} \\; # 目录权限 755 $ find . -type f -exec chmod 644 {} \\; # 文件权限 644 $ find . -path ./.git -prune -o -type f -exec chmod 644 {} \\; # 排除 .git 目录（`-path ./.git -prune -o`） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filemode/umask.html":{"url":"cmd/fs/filemode/umask.html","title":"umask","keywords":"","body":"umask umask（user mask）用于设置新文件的默认模式（即权限）。 原理 文件默认模式 = | 文件初始模式 - umask 值的向下取偶值 | 目录默认模式 = | 目录初始模式 - umask 值 | umask 值 文件权限 目录权限 0 rw-（6） rwx（7） 1 rw-（6） rw-（6） 2 r--（4） r-x（5） 3 r--（4） r--（4） 4 -w-（2） -wx（3） 5 -w-（2） -w-（2） 6 --x（1） --x（1） 7 ---（0） ---（0） 文件默认模式 通常，Unix/Linux 的文件（除目录以外的文件）初始模式是 666（rw-rw-rw），而目录的初始模式是 777（rwxrwxrwx）。 系统 umask 默认值 文件默认模式 目录默认模式 macOS 0022（022） -rw-r--r--（即 644） drwxr-xr-x（即 755） CentOS 0022（022） -rw-r--r--（即 644） drwxr-xr-x（即 755） Ubuntu Server 0022（022） -rw-r--r--（即 644） drwxr-xr-x（即 755） Ubuntu Desktop 0002（002） -rw-rw-r--（即 664） drwxrwxr-x（即 775） 改变文件默认模式（即修改 umask 默认值）： $ vi ~/.bashrc umask 002 # 或 umask u=rwx,g=rwx,o= （这种方式不用加加减减） Also chmod 示例 Ubuntu Desktop $ umask 0002 $ touch f1 $ mkdir d1 $ ls -ld f1 d1 drwxrwxr-x 2 yin yin 4096 7月 16 11:32 d1 # 775（进一步说明 ubuntu 的 umask 值是 002） -rw-rw-r-- 1 yin yin 0 7月 16 11:32 f1 # 664 # 临时改变 umask $ umask 004 $ touch f2 $ mkdir d2 $ ls -ld f2 d2 drwxrwx-wx 2 yin yin 4096 7月 16 11:35 d2 # 773 -rw-rw--w- 1 yin yin 0 7月 16 11:35 f2 # 662 macOS $ umask 0022 $ touch f1 $ ls -l f1 -rw-r--r-- 1 in staff 0 7 16 11:20 f1 # 644 # 临时改变 umask $ umask 002 $ touch f2 $ ls -l f2 -rw-rw-r-- 1 in staff 0 7 16 11:22 f2 # 664 参考 What is Umask and How To Setup Default umask Under Linux? Default File Permissions (umask) Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/dumpe2fs.html":{"url":"cmd/fs/filesystem/dumpe2fs.html","title":"dumpe2fs","keywords":"","body":"dumpe2fs 打印磁盘设备上 ext2/ext3/ext4 文件系统的信息，包括超级块（super block）和块组（blocks group）信息。 示例 $ dumpe2fs /dev/sdb1 # 分区 /dev/sdb1 格式化了 ext4 文件系统 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/e2fsck.html":{"url":"cmd/fs/filesystem/e2fsck.html","title":"e2fsck","keywords":"","body":"e2fsck Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/e4defrag.html":{"url":"cmd/fs/filesystem/e4defrag.html","title":"e4defrag","keywords":"","body":"e4defrag 联机针对 ext4 文件系统进行碎片整理。 安装 $ sudo apt-get install e2fsprogs 语法 $ e4defrag [ -c ] [ -v ] target ... 参数 参数 描述 target ext4 文件系统挂载的普通文件、目录或设备文件 示例 $ sudo e4defrag -v /dev/sdb1 # 分区 /dev/sdb1 创建了 ext4 文件系统 ...... Success: [ 1429450/1878288 ] Failure: [ 448838/1878288 ] Total extents: 1534770->1461346 Fragmented percentage: 1%->0% $ sudo e4defrag / Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/mkfs.html":{"url":"cmd/fs/filesystem/mkfs.html","title":"mkfs","keywords":"","body":"mkfs 创建一个 Linux 文件系统。 语法 mkfs [options] [-t type] [fs-options] device [size] 参数 参数 描述 size 指定该文件系统将使用的（连续的）物理块数量，即逻辑块的大小 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/mkfs.xfs.html":{"url":"cmd/fs/filesystem/mkfs.xfs.html","title":"mkfs.xfs","keywords":"","body":"mkfs.xfs 示例 # -s 指定的是 “逻辑扇区” 的大小 $ mkfs.xfs -f -s size=4096 /dev/sda1 # -b 指定的是 “文件系统块” 的大小 $ mkfs.ext4 -F -b 4096 /dev/sda1 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/mount.html":{"url":"cmd/fs/filesystem/mount.html","title":"mount","keywords":"","body":"mount 挂载一个文件系统 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/xfsdump.html":{"url":"cmd/fs/filesystem/xfsdump.html","title":"xfsdump","keywords":"","body":"xfsdump 安装 $ yum install -y xfsdump Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filesystem/xfsprogs/":{"url":"cmd/fs/filesystem/xfsprogs/","title":"xfsprogs","keywords":"","body":"xfsprogs Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filetype/file.html":{"url":"cmd/fs/filetype/file.html","title":"file","keywords":"","body":"file file 用于判断文件类型 示例 $ file /etc /etc: directory $ file /dev/null /dev/null: character special $ file /dev/sda /dev/sda: block special $ file /etc/hosts /etc/hosts: ASCII text $ file /etc/resolv.conf /etc/resolv.conf: symbolic link to '../run/resolvconf/resolv.conf' $ file /bin/ls /bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=bd39c07194a778ccc066fc963ca152bdfaa3f971, stripped $ file /run/docker.sock /run/docker.sock: socket Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filetype/mkfifo.html":{"url":"cmd/fs/filetype/mkfifo.html","title":"mkfifo","keywords":"","body":"mkfifo 创建 FIFO（命名管道） 示例 $ mkfifo mypipe Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/filetype/mknod.html":{"url":"cmd/fs/filetype/mknod.html","title":"mknod","keywords":"","body":"mknod 创建块设备文件或字符设备文件。 帮助 $ man mknod 语法 $ mknod [OPTION]... NAME TYPE [MAJOR MINOR] 选项 参数 参数 描述 NAME 设备名称 TYPE 设备类型（b：块设备，c：字符设备） MAJOR 主设备号 MINOR 副设备号 示例 $ sudo mknod /tmp/swap b 1 100 参考 mknod 用法以及主次设备号 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/getfacl.html":{"url":"cmd/fs/getfacl.html","title":"getfacl","keywords":"","body":"getfacl 获取文件访问控制列表（ACL） 示例 $ getfacl /bin/ls getfacl: Removing leading '/' from absolute path names # file: bin/ls # owner: root # group: root user::rwx group::r-x other::r-x Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/grep.html":{"url":"cmd/fs/grep.html","title":"grep","keywords":"","body":"grep grep 查找过滤命令 参数 参数 描述 -i 忽略大小写 -A n 匹配上文 n 行 -B n 匹配下文 n 行 -C n 匹配上下文 n 行 egrep、fgrep、rgrep egrep = grep -E （已弃用） fgrep = grep -F （已弃用） rgrep = grep -r 示例 不分大小写 $ env | grep -i \"proxy\" 匹配上文 $ env | grep \"HOSTNAME\" -A 1 LC_MONETARY=zh_CN.UTF-8 TERM=xterm 匹配下文 $ env | grep \"HOSTNAME\" -B 1 LC_ADDRESS=zh_CN.UTF-8 HOSTNAME=centos-node-1 匹配上下文 $ env | grep \"HOSTNAME\" -C 1 LC_ADDRESS=zh_CN.UTF-8 HOSTNAME=centos-node-1 LC_MONETARY=zh_CN.UTF-8 排除自身 $ ps aux | grep \"[b]ash\" root 3843 0.0 0.0 115564 2208 pts/0 Ss 8月08 0:00 -bash root 8211 0.0 0.0 115436 2088 tty1 Ss+ 2018 0:00 -bash Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/less.html":{"url":"cmd/fs/less.html","title":"less","keywords":"","body":"less 空格 显示下一页 b（back）显示上一页 命令 比较 cat 需要预先加载文件的全部内容 more 从前往后读取文件；需要预先加载整个文件 less 不会预先加载整个文件 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/ln.html":{"url":"cmd/fs/ln.html","title":"ln","keywords":"","body":"ln ln 用于在文件之间创建链接。 示例 $ sudo ln /etc/hosts hosts $ ls -li /etc/hosts hosts 3676053 -rw-r--r-- 2 root root 1431 6月 20 18:30 /etc/hosts 3676053 -rw-r--r-- 2 root root 1431 6月 20 18:30 hosts Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/ls.html":{"url":"cmd/fs/ls.html","title":"ls","keywords":"","body":"ls 语法 ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...] 选项 选项 描述 -a 显示匿名文件，包括 . 和 .. 两个硬链接 -d 列出目录本身，而非目录条目 -i / --inode 显示每个文件的索引号（inode 编号） -s / --size 显示每个文件所分配的文件块数量 -t 按文件修改时间排序（最近修改的排在前面），如果修改时间相同在按字典顺序排序 示例 ls -l $ ls -l -rw-r--r-- 1 in staff 27 7 10 20:46 package-lock.json # 对应的绝对模式是 644 drwxr-xr-x 3 in staff 96 7 8 21:09 resources # 对应的绝对模式是 755 第 1 列（文件类型及文件权限）： 第 1 位：文件类型；- 表示普通文件，d 表示目录，l 表示链接文件 ... 第 2-4 位：文件所有者权限；rw-：可读可写、不可执行或不可搜索 第 5-7 位：成员组权限；r--：可读、不可写、不可执行或不可搜索 第 8-10 位：其他人权限 第 2 列：硬链接数 ls -li $ ls -li /etc/resolv.conf 3670217 lrwxrwxrwx 1 root root 29 4月 14 2017 /etc/resolv.conf ls -ls $ ls -ls /etc/hosts 4 -rw-r--r--. 1 root root 662 4月 12 05:49 /etc/hosts ls -ld $ ls -ld /etc drwxr-xr-x. 81 root root 8192 8月 1 00:34 /etc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/mount.html":{"url":"cmd/fs/mount.html","title":"ls","keywords":"","body":"ls 语法 mount [-lhV] mount -a [-fFnrsvw] [-t vfstype] [-O optlist] mount [-fnrsvw] [-o option[,option]...] device|dir mount [-fnrsvw] [-t vfstype] [-o options] device dir 选项 选项 描述 -o 附加选项 示例 示例 描述 mount --bind olddir newdir 绑定挂载；将某个目录额外挂载到另一个目录，特点是两个目录的 inode 编号相同且文件类型都是 目录，类似于对目录进行硬链接（Linux 不支持对目录进行硬链接）但有所不同 mount --bind mount --bind 不同于硬链接： mount --bind 绑定的两个目录的 inode 并不相同，只是目标目录的 inode block 被隐藏，inode 被重定向到源目录的 inode（目标目录的 inode 和 block 实际没有发生变化） 两个目录的对应关系存在于内存中，机器重启或 umount 卸载将使目标目录恢复原样 参考 mount --bind 和硬链接的区别 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/od.html":{"url":"cmd/fs/od.html","title":"od","keywords":"","body":"od 以八进制或其他格式显示文件内容。 示例 $ od /etc/hosts | head -n 1 0000000 031061 027067 027060 027060 004461 067554 060543 064154 $ od /sbin/init | head -n 1 0000000 042577 043114 000402 000001 000000 000000 000000 000000 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/ownership/chgrp.html":{"url":"cmd/fs/ownership/chgrp.html","title":"chgrp","keywords":"","body":"chgrp Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/ownership/chown.html":{"url":"cmd/fs/ownership/chown.html","title":"chown","keywords":"","body":"chown Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/search/find.html":{"url":"cmd/fs/search/find.html","title":"find","keywords":"","body":"find sort -n 表示按数字进行排列，所以其对 du -h 的结果进行排序其实是不准确的，因为 du -h 的结果还带有单位（16K、8M、1.8G 等），实际排序时却忽略了单位，因此应该对 sort -hm 后的结果进行才正确。 find 属于实时查找。 参数 参数 描述 -type 指定文件类型： b：块文件 c：字符文件 d：目录 p：命名管道（FIFO） f：普通文件 l：符合链接* s：Socket -exec 对查找结果的每一项都执行某个命令 -empty 如果文件或目录是空的则返回 True -d、--max-depth 指定目录深度 -m 文件大小以 1M 为单位 -h 以可读格式（如 1K、2M、3G）打印文件大小 示例 -exec $ find . -type f -exec grep 'data' {} \\;` $ find . -type d -exec chmod 755 {} \\; 查看大文件 # 查找所有大于 100MB 的文件 $ find . -type f -size +100M # 查找大于 100MB 的文件并按数字进行逆排序（并非完全逆排序，而是忽略单位后的逆排序） $ find . -type f -size +100M -print0 | xargs -0 du -h | sort -nr # 查找大于 100MB 的前十个文件（完全逆排序，统一单位为 MB） $ find . -type f -size +100M -print0 | xargs -0 du -hm | sort -nr | head -n 10 查找大目录 # 查看 1 - 2 层子目录的大小 $ du -hd 2 # 查看 1 - 3 层子目录的大小并进行逆排序（并非完全逆排序，而是忽略单位后的逆排序） $ du -hd 3 . | sort -nr # 查看最大的前十个子目录（完全逆排序，统一单位为 MB） $ du -hmd 2 . | sort -nr | head -n 10 排除子目录 # 排除 .git 目录 $ find . -type d -not -path \"./.git/*\" -exec chmod 755 {} \\; 查找空文件或空目录 $ find . -empty -type f # 空文件 $ find . -empty -type d # 空目录 查找文件时执行命令 $ find . -type d -exec chmod 755 {} \\; $ find . -type d | xargs chmod 755 对比 $ find . -name \"*.md\" | wc -l # 对管道前输出的所有结果统计行数 $ find . -name \"*.md\" | wc -l - $ find . -name \"*.md\" | wc -l /dev/fd/0 $ find . -name \"*.md\" | xargs wc -l # 对管道前输出的每一项都统计行数（按空格、Tab 和行分隔一项） $ find . -name \"*.md\" | xargs wc -l - $ find . -name \"*.md\" | xargs wc -l /dev/fd/0 查询 HOME 目录下的所有隐藏文件 $ find ~ -d 1 -type f -name '\\.*' Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/search/locate.html":{"url":"cmd/fs/search/locate.html","title":"locate","keywords":"","body":"locate locate 通过文件名从索引数据库中查找文件，属于非实时查找。localte 会为文件系统建立索引数据库，如需更新数据库，需要执行 sudo updatedb 命令。 示例 $ locate resolv.conf Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/search/whereis.html":{"url":"cmd/fs/search/whereis.html","title":"whereis","keywords":"","body":"whereis whereis 用于定位二进制文件、源文件和手册页文件的位置。 示例 $ whereis curl curl: /usr/bin/curl /usr/bin/X11/curl /usr/share/man/man1/curl.1.gz Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/secure/checksum.html":{"url":"cmd/fs/secure/checksum.html","title":"Linus 文件校验","keywords":"","body":"Linus 文件校验 md5 $ md5sum xxx.tar.gz sha256 $ sha256sum xxx.tar.gz chsum Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/setfacl.html":{"url":"cmd/fs/setfacl.html","title":"setfacl","keywords":"","body":"setfacl Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/split.html":{"url":"cmd/fs/split.html","title":"split","keywords":"","body":"split split 命令可以按 行数、指定大小 将大文件拆分成多个小文件，而且拆分速度非常快。 参数 -a: 设置拆分文件的后缀长度 -b: 设置每个输出文件的字节数 -l: 设置每个输出文件的行数 -d: 用数字作为拆分的后缀 按行数拆分 方法一 $ split -l 100 src.csv -d -a 1 dist # 校验 $ wc -l dist0 方法二 # 行首 $ head src.csv -n 10000 > dist.csv # 行尾 $ tail src.csv -n 10000 > dist.csv 按字节拆分 -b 不加单位默认表示字节，也可以带单位比如 KB、MB 等 # 字节 $ split -b 100 src.csv -d -a 1 dist # MB $ split -b 100MB src.csv -d -a 1 dist Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/stat.html":{"url":"cmd/fs/stat.html","title":"stat","keywords":"","body":"stat 显示文件或文件系统的状态（没有参数选项时，默认显示文件状态）。 文件状态包括（注：没有文件名））： 文件大小 文件块数量 文件块大小 文件类型 文件模式 inode 编号 链接数、 文件所有者及所在组 文件时间戳：atime、mtime、ctime 等 文件系统状态包括： 文件系统 ID 文件系统类型 文件系统（逻辑）块大小 块的数量：总数、空闲数、可用数 inode 数量：总数、空闲数 语法 stat [OPTION]... FILE... 选项 选项 描述 -f 显示文件系统状态，而非文件状态 示例 文件状态 $ stat /etc/passwd File: ‘/etc/passwd’ Size: 2965 Blocks: 8 IO Block: 4096 regular file Device: 811h/2065d Inode: 3677017 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2019-07-16 00:15:01.047041045 +0800 Modify: 2019-06-21 14:14:16.037970261 +0800 Change: 2019-06-21 14:14:16.041970348 +0800 Birth: - 文件系统状态 # 当前目录所在的文件系统 $ stat -f . File: \".\" ID: b6b5bba30b643afb Namelen: 255 Type: ext2/ext3 Block size: 4096 Fundamental block size: 4096 Blocks: Total: 28811658 Free: 3047444 Available: 1642021 Inodes: Total: 7331840 Free: 5513334 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/swap/":{"url":"cmd/fs/swap/","title":"swap","keywords":"","body":"交换 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/swap/mkswap.html":{"url":"cmd/fs/swap/mkswap.html","title":"mkswap","keywords":"","body":"mkswap 创建一个 Linux 交换区域（Swap Area） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/swap/swapoff.html":{"url":"cmd/fs/swap/swapoff.html","title":"swapoff","keywords":"","body":"swapoff 停止将设备文件（这里是磁盘分区）或常规文件用作分页或交换区域 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/swap/swapon.html":{"url":"cmd/fs/swap/swapon.html","title":"swapon","keywords":"","body":"swapon 将磁盘分区或常规文件用作分页或交换区域 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/sync.html":{"url":"cmd/fs/sync.html","title":"sync","keywords":"","body":"sync 为了提高文件的读写速率，写入到磁盘的数据不会立即从内存同步到磁盘，使用 sync 命令可以强制刷新缓存到磁盘。 用途 关机之前应该先进行 sync 操作 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/tac.html":{"url":"cmd/fs/tac.html","title":"tac","keywords":"","body":"tac tac 是 cat 的反向打印，即从最后一行开始打印。 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/tee.html":{"url":"cmd/fs/tee.html","title":"tee","keywords":"","body":"tee 读取标准输入（stdin）的内容，并写入到文件 和 标准输出（stdout）中。 语法 # 命令后面包含两部分：可选参数（[OPTION]...）和文件列表（[FILE]...） $ tee [OPTION]... [FILE]... 参数 参数 描述 -a, --append 追加内容到文件；没有参数时默认是覆写 示例 stdin -> overwrite + stdout $ tee README.md Hello # stdin Hello # stdout ^C # Ctrl+C # 查看文件内容（若已有内容会被覆写） $ cat README.md 123 管道 stdin -> 覆写多个文件 + stdout # 管道 “|” 将前一个命令的 stdout 作为后一个命令的 stdin $ echo \"Hello,world\" | tee READMD.md README.rst Hello,world # stdout # overwrite $ cat README.md Hello,world $ cat README.md Hello,world 可以解决重定向没有权限的问题： # 普通用户没有写入权限 $ echo 123 > /etc/README.md bash: /etc/README.md: Permission denied # 加个 sudo ? $ sudo echo 123 > /etc/README.md bash: /etc/README.md: Permission denied # 正解 1 $ echo 123 | sudo tee /etc/README.md # 正解 2 $ sudo sh -c 'echo 123 > /etc/README.md' 重定向 -> 追加到文件末尾 $ tee -a /tmp/file Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/timestamp/utime.html":{"url":"cmd/fs/timestamp/utime.html","title":"utime/utimes","keywords":"","body":"utime/utimes 改变文件的最后访问时间（atime）和最后修改时间（mtime）。 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/fs/touch.html":{"url":"cmd/fs/touch.html","title":"touch","keywords":"","body":"touch 更新文件时间戳。 参数 参数 描述 -a 更新 atime -c 更新 ctime，但不会创建新文件 -m 更新 mtime Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/gnu/":{"url":"cmd/gnu/","title":"gnu","keywords":"","body":"GNU 实用程序 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/gnu/make/":{"url":"cmd/gnu/make/","title":"make","keywords":"","body":"make Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/head.html":{"url":"cmd/head.html","title":"head","keywords":"","body":"head Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/help/info.html":{"url":"cmd/help/info.html","title":"info","keywords":"","body":"info Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/help/man.html":{"url":"cmd/help/man.html","title":"man - 查看 Linux 参考手册的接口/命令","keywords":"","body":"man - 查看 Linux 参考手册的接口/命令 注：手册页默认在 less 程序中打开（q：退出，空格：下一页，b：上一页）。 安装 # CentOS $ sudo yum install -y man-pages Section 手册页分为以下几个部分（sections）： Section 描述 1 2 3 4 5 6 7 8 【第 1 部分】用户命令（user commands） 【第 2 部分】系统调用（system calls） 【第 3 部分】库函数（library functions） 【第 4 部分】特殊文件（special files），如 /dev 目录中的设备 【第 5 部分】文件格式（file formats） 【第 6 部分】游戏（games） 【第 7 部分】概述和杂项（overview and miscellany） 【第 8 部分】管理和特权命令（administration and privileged commands） 当上述部分的名字相同时，需要指定从哪个部分获取正确的手册页（指定数字即可）。 # man 手册 $ man man # 命令手册 $ man pwd $ man which # C 标准库的库函数手册 $ man isspace # $ man printf # # 名字相同时 $ man 2 write # 系统调用手册 $ man 3 write # 库函数手册 示例 # WRITE(2) 中的 2 指的是这是第 2 部分 $ man 2 write WRITE(2) Linux Programmer's Manual WRITE(2) NAME write - write to a file descriptor SYNOPSIS #include ssize_t write(int fd, const void *buf, size_t count); Apropos 如果不知道函数或命令的名称，可以使用 apropos 程序搜索所列关键字的手册页描述，并查找认为匹配的命令或函数。 $ apropos \"working directory\" chdir (2) - change working directory fchdir (2) - change working directory get_current_dir_name (3) - get current working directory getcwd (2) - get current working directory getcwd (3) - get current working directory getwd (3) - get current working directory git-stash (1) - Stash the changes in a dirty working directory away pwd (1) - print name of current/working directory pwdx (1) - report current working directory of a process 参考 The Linux man-pages project Linux man pages online Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/history.html":{"url":"cmd/history.html","title":"history - 查看命令行历史","keywords":"","body":"history - 查看命令行历史 附加命令 命令 描述 !n（n 是命令编号） 再次执行第 n 行历史命令 !! 执行上一条命令 !$ 返回上一条命令的最后一个参数 示例 $ cat /etc/hosts | grep -i '127.0.0.1' -A 1 127.0.0.1 localhost 255.255.255.255 broadcasthost $ echo !$ echo 1 1 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/kernel/sysctl.html":{"url":"cmd/kernel/sysctl.html","title":"sysctl","keywords":"","body":"sysctl sysctl 源自 procps-ng 包，它可以在 运行时 检查和修改内核参数，参数信息存储在 /proc/sys/ 目录。 配置 加载 # 手动加载所有配置文件 $ sysctl --system # 加载单个配置文件 $ sysctl -p .conf 查看 # 可用参数是 /proc/sys/ 下列出的参数 $ ll /proc/sys abi crypto debug dev fs kernel net sunrpc vm # 查看所有的 kernel 参数值 $ sysctl -a abi.vsyscall32 = 1 crypto.fips_enabled = 0 debug.exception-trace = 1 debug.kprobes-optimization = 1 dev.cdrom.autoclose = 1 ... # 查看健值 $ sysctl fs.file-max # 查看某个 kernel 参数值 $ sysctl -n fs.file-max # or: sysctl fs.file-max 3245441 # `fs.file-max` 参数引用了 /proc/sys/fs/file-max 文件 $ cat /proc/sys/fs/file-max 3245441 修改 临时修改某个 kernel 参数值 # 临时性修改某个 kernel 参数值 $ sysctl -w fs.file-max=\"500000\" # 或 $ echo 500000 > /proc/sys/fs/file-max 永久修改某个 kernel 参数值 # 系统级限制 $ vi /etc/sysctl.conf fs.file-max=102400 # 最大文件数 vm.swappiness=0 # 禁用交换空间（貌似没用） # 退出后重新登录即可生效，或者使用下面的命令立即生效 $ sysctl -p 用户级别限制 （选择 root 用户操作） $ vi /etc/security/limits.conf marin hard nofile 4096 marin soft nofile 4096 其他 # 查看所有进程的 open files （3274832 \"表示最大值，源自 /proc/sys/fs/file-max） $ sysctl fs.file-nr 19136 0 3274832 # 或 $ sysctl /proc/sys/fs/file-nr Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/kernel/ulimit.html":{"url":"cmd/kernel/ulimit.html","title":"ulimit","keywords":"","body":"ulimit User limits - 用于限制用户对 系统资源 的使用。ulimit 提供对 shell 可用资源及其启动的进程的控制。soft limit 是 Kernel 对相应资源强制执行的值。 $ ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 159888 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 1024 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 8192 cpu time (seconds, -t) unlimited max user processes (-u) 159888 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited # 每个进程的 hard nofiles limits $ ulimit -Hn 4096 # 每个进程的 soft nofiles limits $ ulimit -Sn 1024 修改每个进程的最大文件打开数。 设置系统资源限制 临时性修改 # nofiles $ ulimit -n 1024 # nproc $ ulimit -u 32768 # memlock $ ulimit -l ulimited 永久性修改 方式一 # 退出重新登录即生效 $ echo \"ulimit -u unlimited\" >> /root/.bashrc 方式二 $ vi /etc/security/limits.conf # #* - core #* - data #* - priority #* - fsize #* soft sigpending eg:57344 #* hard sigpending eg:57444 #* - memlock #* - nofile eg:1024 #* - msgqueue eg:819200 #* - locks #* soft core #* hard nofile #@ hard nproc # soft nproc #% hard nproc # hard nproc #@ - maxlogins # hard cpu # soft cpu # hard locks 可以是： 用户名 组名，带有 @group 语法 可以是： \"soft\" 执行 soft limits \"hard\" 执行 hard limits 其他 # 获取进程的 PID $ ps aux | grep 查看某进程的 limits # 查看该进程的 limits $ cat /proc//limits # 用户级限制（针对进程、用户、用户组、或者所有），退出重新登录生效 $ vi /etc/security/limits.conf * soft nofile 4096 * hard nofile 10240 * soft memlock ulimited * hard memlock ulimited * soft nproc 65535 * hard nproc 65535 示例 ubuntu 修改 open files # 查看系统最大值 $ cat /proc/sys/fs/file-max # 可用的限制 $ ulimit -n # 如有必要，可以增加 file-max $ sudo echo \"fs.file-max = 102400\" >> /proc/sys/fs/file-max $ sysctl -p # 不能超过 fs.file-max $ sudo vi /etc/security/limits.conf * soft nofile 102400 * hard nofile 102400 root soft nofile 102400 root hard nofile 102400 # 仅限 ubuntu $ echo \"session required pam_limits.so\" >> /etc/pam.d/common-session # 退出重新登录即可生效 $ ulimit -n Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/misc/bc.html":{"url":"cmd/misc/bc.html","title":"bc","keywords":"","body":"bc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/misc/cal.html":{"url":"cmd/misc/cal.html","title":"cal","keywords":"","body":"cal 示例 $ cal 七月 2019 日 一 二 三 四 五 六 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/misc/crontab.html":{"url":"cmd/misc/crontab.html","title":"crontab","keywords":"","body":"crontab 定义 $ cat /etc/crontab ┌───────────── 分 (0 - 59) │ ┌───────────── 时 (0 - 23) │ │ ┌───────────── 日 (1 - 31) │ │ │ ┌───────────── 月 (1 - 12) │ │ │ │ ┌───────────── 周 (0 - 6) │ │ │ │ │ │ │ │ │ │ * * * * * command_to_execute 命令 # 查看 $ crontab -l # 临时编辑 $ crontab -e # 永久编辑 $ vi /etc/crontab 示例 每隔 5 分钟执行一次 */5 * * * * date >> /tmp/dateinfo 每天 23:30 执行一次任务 30 23 * * * date >> /tmp/dateinfo 每月的 1、10、20 日执行一次任务 21 10 1,10,20 * * date >> /tmp/dateinfo 晚上 11 点到早上 8 点之间每隔 2 个小时，以及早上 8 点执行一次任务 0 23-7/2,8 * * * date >> /tmp/dateinfo Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/misc/dmidecode.html":{"url":"cmd/misc/dmidecode.html","title":"dmidecode","keywords":"","body":"dmidecode Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/mm/swap/swapoff.html":{"url":"cmd/mm/swap/swapoff.html","title":"swapoff","keywords":"","body":"swapoff Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/mm/swap/swapon.html":{"url":"cmd/mm/swap/swapon.html","title":"swapon","keywords":"","body":"swapon Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/module/":{"url":"cmd/module/","title":"module","keywords":"","body":"Linux Driver/Module Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/module/lsmod.html":{"url":"cmd/module/lsmod.html","title":"lsmod","keywords":"","body":"lsmod Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/module/modinfo.html":{"url":"cmd/module/modinfo.html","title":"modinfo","keywords":"","body":"modinfo Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/module/modprobe.html":{"url":"cmd/module/modprobe.html","title":"modprobe","keywords":"","body":"modprobe 添加或移除内核模块。 示例 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/more.html":{"url":"cmd/more.html","title":"more","keywords":"","body":"more Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/nano.html":{"url":"cmd/nano.html","title":"nano","keywords":"","body":"nano 设置默认编辑器 $ export EDITOR=nano Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/net/ping.html":{"url":"cmd/net/ping.html","title":"ping","keywords":"","body":"ping Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/net/ssh.html":{"url":"cmd/net/ssh.html","title":"SSH","keywords":"","body":"SSH ssh-keygen $ ssh-keygen -t rsa -N '' ssh-agent 问题整理 首次登录免确认 首次登录时，如果没有把被登录节点加入到 ~/.ssh/known_hosts 中会提示是否继续连接。如果使用脚本来登录时需要避免出现这样的情况，因为脚本无法像键入 Enter 键一样进行确认。 The authenticity of host '9.111.143.205 (9.111.143.205)' can't be established. ECDSA key fingerprint is SHA256:QQYvT8PFYzVL8oD5fIySTEH5LjPCN8BtayCDLsvp42k. Are you sure you want to continue connecting (yes/no)? # 登录端进行修改 $ cat >> ~/.ssh/config OR： # 服务端进行修改 $ vi /etc/ssh/sshd_config IgnoreUserKnownHosts yes # 别忘了重启 sshd $ systemctl restart sshd.service ssh 登录时提示 “Permission denied (publickey,gssapi-keyex,gssapi-with-mic).” DigitalOcean 经常出现此问题，原因是在网页中添加客户端的 SSH keys 可能并未生效，最稳妥的方法是将客户端的公钥手动添加到服务端的 authorized_key 中。 参考 ssh-agent 命令 SSH agent 转发 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/net/uucp.html":{"url":"cmd/net/uucp.html","title":"uucp","keywords":"","body":"uucp Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/net/uuencode.html":{"url":"cmd/net/uuencode.html","title":"uuencode","keywords":"","body":"uuencode Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/net/uustat.html":{"url":"cmd/net/uustat.html","title":"uustat","keywords":"","body":"uustat Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/":{"url":"cmd/ps/","title":"ps","keywords":"","body":"进程管理 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/fuser.html":{"url":"cmd/ps/fuser.html","title":"fuser","keywords":"","body":"fuser Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/init.html":{"url":"cmd/ps/init.html","title":"init","keywords":"","body":"init init 是一个初始化工具，不同的操作系统可能使用不同的初始化工具，比如 CentOS 使用 systemd 作为 init. # CentOS 7 $ ll /sbin/init lrwxrwxrwx. 1 root root 22 10月 9 17:49 /sbin/init -> ../lib/systemd/systemd # macOS $ ps -ef | awk '$2==1' UID PID PPID C STIME TTY TIME CMD 0 1 0 0 12 619 ?? 45:46.85 /sbin/launchd Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/kill.html":{"url":"cmd/ps/kill.html","title":"kill","keywords":"","body":"kill 参数 参数 描述 -l 示例 kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/lsof.html":{"url":"cmd/ps/lsof.html","title":"lsof","keywords":"","body":"lsof lsof（LiSt Open File）显示所有进程的 Open Files （包括开启的套接字）。不过它可能显示重复的结果，比如 /dev/null。 用法 列出所有 open files $ lsof COMMAND PID TID USER FD TYPE DEVICE SIZE/OFF NODE NAME systemd 1 root cwd DIR 9,127 4096 2 / systemd 1 root rtd DIR 9,127 4096 2 / systemd 1 root txt REG 9,127 1523624 265115 /usr/lib/systemd/systemd ...... FD（File Descriptor） 的值（r 表示读，w 表示写，u 表示读和写）： cwd - Current working directory txt - Text file mem - Memory Mapped file mmap - Memory Mapped device Number - It represent the actual file descriptor. For example, 0u, 1w and 3r Type 表示文件的类型，其值： REG - Regular file 常规文件 DIR - Directory CHR - Character special file 字符特殊文件 FIFO - First in first out 根据端口查看进程 $ lsof -i :22 # 设置端口范围 lsof -i :1-1024 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME sshd 1646 root 3u IPv4 28299 0t0 TCP *:ssh (LISTEN) sshd 1646 root 4u IPv6 28301 0t0 TCP *:ssh (LISTEN) sshd 6646 root 3u IPv4 2657432209 0t0 TCP ip-160.node.k8s.ew:ssh->192.168.18.219:11806 (ESTABLISHED) sshd 13501 root 3u IPv4 1373497715 0t0 TCP ip-160.node.k8s.ew:ssh->192.168.18.219:7267 (ESTABLISHED) sshd 14260 root 3u IPv4 1083515099 0t0 TCP ip-160.node.k8s.ew:ssh->192.168.18.219:14690 (ESTABLISHED) sshd 24754 root 3u IPv4 2609265143 0t0 TCP ip-160.node.k8s.ew:ssh->192.168.18.219:10783 (ESTABLISHED) sshd 26302 root 3u IPv4 1110132794 0t0 TCP ip-160.node.k8s.ew:ssh->192.168.8.220:37094 (ESTABLISHED) 列出某进程的 open files % lsof -p 列出某用户的 open files % lsof -u 干掉某用户的所有操作 % killall -9 `lsof -t -u ` 目录下的 open files % lsof +D 基于进程/命令名称查看 open files # lsof -c $ lsof -c ssh COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME sshd 1646 root cwd DIR 9,127 4096 2 / sshd 1646 root rtd DIR 9,127 4096 2 / sshd 1646 root txt REG 9,127 823744 265869 /usr/sbin/sshd ...... 列出所有的网络连接 $ lsof -i COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME chronyd 1133 chrony 1u IPv4 18522 0t0 UDP localhost:323 chronyd 1133 chrony 2u IPv6 18523 0t0 UDP localhost:323 rpcbind 1135 rpc 6u IPv4 13472 0t0 UDP *:sunrpc rpcbind 1135 rpc 7u IPv4 13473 0t0 UDP *:878 参考 lsof command usages with example Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/netstat.html":{"url":"cmd/ps/netstat.html","title":"netstat","keywords":"","body":"netstat 示例 # 查看进程监听的 TCP 端口 $ netstat -tpln # ss -tpla # lsof -iTCP -sTCP:LISTEN -P -n # 查看进程监听的 UDP 端口 $ netstat -upln # ss -upla Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/nohup.html":{"url":"cmd/ps/nohup.html","title":"nohup","keywords":"","body":"nohup nohup 是 no hangup 的缩写，意为 “不挂起”，即在后台持续运行进程。 示例 $ nohup ping baidu.com > /dev/null 2&>1 & Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/pgrep-pkill.html":{"url":"cmd/ps/pgrep-pkill.html","title":"pgrep 与 pkill","keywords":"","body":"pgrep 与 pkill pgrep - 按名称搜索进程，并打印所有匹配进程的 PID pkill - 按名称搜索进程，并向所有匹配进程发送信号 参数 参数 描述 -f 示例 $ pgrep bash Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/pgrep.html":{"url":"cmd/ps/pgrep.html","title":"pgrep","keywords":"","body":"pgrep 示例 根据进程名查询 PID $ pgrep dockerd 29396 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/ps.html":{"url":"cmd/ps/ps.html","title":"ps","keywords":"","body":"ps Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/pstack.html":{"url":"cmd/ps/pstack.html","title":"pstack","keywords":"","body":"pstack 安装 Ubuntu $ sudo apt install -y pstack 示例 $ pstack $$ 4110930: bash (No symbols found) crawl: Input/output error Error tracing through process 4110930 0x7f2bf9e8b95c: ???? Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/pstree.html":{"url":"cmd/ps/pstree.html","title":"pstree","keywords":"","body":"pstree 显示进程树 安装 macOS $ brew install pstree CentOS $ yum install psmisc 语法 pstree [-a, --arguments] [-c, --compact] [-h, --high‐light-all, -Hpid, --highlight-pid pid] [-g] --show-pgids] [-l, --long] [-n, --numeric-sort] [-p, --show-pids] [-s, --show-parents] [-u, --uid-changes] [-Z, --security-context] [-A, --ascii, -G, --vt100, -U, --unicode] [pid, user] pstree -V, --version 选项 选项 描述 -a 显示命令行参数 -s 显示进程的父进程；Linux 默认只显示指定进程的子进程 -p 显示进程的 PID -g 显示进程组 ID（即 GPID） 示例 ubuntu desktop 14.04 $ pstree -asp $$ init,1 └─lightdm,1616 └─lightdm,2052 --session-child 12 19 └─init,206159 --user └─gnome-terminal,468355 └─bash,478917 └─pstree,1031493 -a -s -p 478917 CentOS $ pstree -asp $$ systemd,1 --system --deserialize 17 └─sshd,1594 -D └─sshd,3529 └─bash,3843 └─pstree,27956 -a -s -p 3843 macOS # macOS 的 -p 显示父进程和各个进程的 PID $ pstree -p $$ -+= 00001 root /sbin/launchd \\-+= 70324 in /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal \\-+= 71795 root login -pf in \\-+= 71796 in -bash \\-+= 74010 in pstree -p 71796 \\--- 74011 root ps -axwwo user,pid,ppid,pgid,command Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/time.html":{"url":"cmd/ps/time.html","title":"time","keywords":"","body":"time time 命令统计命令或脚本的运行时间。 $ time sleep 5 real 0m5.002s user 0m0.001s sys 0m0.001s Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/ps/top.html":{"url":"cmd/ps/top.html","title":"top","keywords":"","body":"top Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/":{"url":"cmd/sccs/","title":"sccs","keywords":"","body":"SCCS（Source Code Control System） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/admin.html":{"url":"cmd/sccs/admin.html","title":"admin","keywords":"","body":"admin Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/delta.html":{"url":"cmd/sccs/delta.html","title":"delta","keywords":"","body":"delta Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/get.html":{"url":"cmd/sccs/get.html","title":"get","keywords":"","body":"get Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/prs.html":{"url":"cmd/sccs/prs.html","title":"prs","keywords":"","body":"prs Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/rmdel.html":{"url":"cmd/sccs/rmdel.html","title":"rmdel","keywords":"","body":"rmdel Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/sact.html":{"url":"cmd/sccs/sact.html","title":"scat","keywords":"","body":"scat Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/sccs.html":{"url":"cmd/sccs/sccs.html","title":"sccs","keywords":"","body":"sccs Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/unget.html":{"url":"cmd/sccs/unget.html","title":"unget","keywords":"","body":"unget Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/val.html":{"url":"cmd/sccs/val.html","title":"val","keywords":"","body":"val Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sccs/what.html":{"url":"cmd/sccs/what.html","title":"what","keywords":"","body":"what Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/search/apropos.html":{"url":"cmd/search/apropos.html","title":"apropos","keywords":"","body":"apropos Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/search/whatis.html":{"url":"cmd/search/whatis.html","title":"whatis","keywords":"","body":"whatis Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sed.html":{"url":"cmd/sed.html","title":"sed","keywords":"","body":"sed Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/shell/":{"url":"cmd/shell/","title":"shell","keywords":"","body":"Shell Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/shell/chsh.html":{"url":"cmd/shell/chsh.html","title":"chsh","keywords":"","body":"chsh 更改 login shell。 用法 chsh [options] [LOGIN] 选项 选项 描述 -s/--shell SHELL 指定新的 login shell；SHELL 是 login shell 的路径 -R/--root CHROOT_DIR 示例 更改当前用户的 login shell $ whoami yin # 要求输入 root 密码（注：使用 sudo 更改的是 root 用户的 login shell） $ chsh -s /bin/zsh # 检查 $ cat /etc/passwd | grep yin yin:x:1000:1000:Yin,,,:/home/yin:/bin/zsh # 检查 $ echo $SHELL /bin/zsh Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sort.html":{"url":"cmd/sort.html","title":"sort","keywords":"","body":"sort Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/":{"url":"cmd/stat/","title":"stat","keywords":"","body":"资源统计（Resource Statistics） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/cpu/lscpu.html":{"url":"cmd/stat/cpu/lscpu.html","title":"lscpu","keywords":"","body":"lscpu 示例 $ $ lscpu Architecture: x86_64 CPU op-mode(s): 32-bit, 64-bit Byte Order: Little Endian CPU(s): 4 On-line CPU(s) list: 0-3 Thread(s) per core: 1 Core(s) per socket: 4 Socket(s): 1 NUMA node(s): 1 Vendor ID: GenuineIntel CPU family: 6 Model: 42 Stepping: 7 CPU MHz: 3193.007 BogoMIPS: 5986.73 Virtualization: VT-x L1d cache: 32K L1i cache: 32K L2 cache: 256K L3 cache: 6144K NUMA node0 CPU(s): 0-3 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/disk/blockdev.html":{"url":"cmd/stat/disk/blockdev.html","title":"blockdev","keywords":"","body":"blockdev 从命令行调用块设备 ioctl 语法 blockdev [-q] [-v] command [command...] device [device...] blockdev --report [device...] 选项 选项 描述 --getbsz 打印块大小，即逻辑扇区大小（Logical sector size）；单位：字节 --getss 打印物理扇区大小（Physical sector size）；单位：字节 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/disk/df.html":{"url":"cmd/stat/disk/df.html","title":"df","keywords":"","body":"df 报告文件系统的磁盘空间使用情况。 语法 $ df [OPTION]... [FILE]... 示例 # $ df -h # 增加类型 $ df -hT # $ df -ahT $ df -h /dev/sdb1 Filesystem Size Used Avail Use% Mounted on /dev/sdb1 110G 103G 1.6G 99% / Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/disk/fdisk.html":{"url":"cmd/stat/disk/fdisk.html","title":"fdisk","keywords":"","body":"fdisk 操作磁盘分区表 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/disk/lsblk.html":{"url":"cmd/stat/disk/lsblk.html","title":"lsblk","keywords":"","body":"lsblk 安装 macOS sh Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/hardware/lshw.html":{"url":"cmd/stat/hardware/lshw.html","title":"lshw","keywords":"","body":"lshw lshw 列出硬件信息 安装 # CentOS $ yum install -y lshw 命令 # 所有 $ lshw -short # 内存（-c: -class） $ lshw -short -c memory H/W path Device Class Description ====================================================== /0/0 memory 64KiB BIOS /0/3a/3b memory 256KiB L1 cache /0/3a/3c memory 1MiB L2 cache /0/3a/3d memory 8MiB L3 cache /0/3e memory 32GiB System Memory /0/3e/0 memory 8GiB DIMM DDR3 Synchronous 1600 MHz (0.6 ns) /0/3e/1 memory 8GiB DIMM DDR3 Synchronous 1600 MHz (0.6 ns) /0/3e/2 memory 8GiB DIMM DDR3 Synchronous 1600 MHz (0.6 ns) /0/3e/3 memory 8GiB DIMM DDR3 Synchronous 1600 MHz (0.6 ns) # CPU $ lshw -short -c cpu H/W path Device Class Description ====================================================== /0/3a processor Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz # Network $ lshw -short -C network H/W path Device Class Description ====================================================== /0/100/19 eth0 network Ethernet Connection I217-LM /1 bridge0 network Ethernet interface /2 vethe8eae5c network Ethernet interface /3 ovs-system network Ethernet interface 参考 16 commands to check hardware information on Linux Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/inxi.html":{"url":"cmd/stat/inxi.html","title":"inxi","keywords":"","body":"inxi 安装 $ yum install -y inxi 示例 $ inxi -Fi System: Host: Yin Kernel: 4.4.0-148-generic x86_64 (64 bit) Desktop: Gnome Distro: Ubuntu 14.04 trusty Machine: System: Dell product: OptiPlex 9010 version: 01 Mobo: Dell model: 0T3G9D version: A02 Bios: Dell version: A13 date: 03/27/2013 CPU: Quad core Intel Core i5-2320 CPU (-MCP-) cache: 6144 KB flags: (lm nx sse sse2 sse3 sse4_1 sse4_2 ssse3 vmx) Clock Speeds: 1: 3202.031 MHz 2: 3196.406 MHz 3: 3203.906 MHz 4: 3208.242 MHz Graphics: Card: NVIDIA GK107 [GeForce GT 630 OEM] X.Org: 1.17.2 drivers: nouveau (unloaded: fbdev,vesa) Resolution: 1920x1080@60.0hz, 1920x1080@60.0hz, 1920x1080@60.0hz GLX Renderer: Gallium 0.4 on NVE7 GLX Version: 3.0 Mesa 11.0.2 Audio: Card-1: Intel 7 Series/C210 Series Family High Definition Audio Controller driver: snd_hda_intel Card-2: NVIDIA GK107 HDMI Audio Controller driver: snd_hda_intel Sound: Advanced Linux Sound Architecture ver: k4.4.0-148-generic Network: Card: Intel 82579LM Gigabit Network Connection driver: e1000e IF: eth1 state: up speed: 1000 Mbps duplex: full mac: 90:b1:1c:a5:42:7b WAN IP: 116.235.235.133 IF: veth0357603@if17 ip: N/A IF: vmnet8 ip: 192.168.135.1 IF: eth1 ip: 192.168.16.100 IF: vmnet1 ip: 172.16.164.1 IF: docker0 ip: 172.17.0.1 IF: virbr0 ip: 192.168.122.1 Drives: HDD Total Size: 1120.2GB (12.5% used) 1: id: /dev/sda model: ST1000DM003 size: 1000.2GB 2: id: /dev/sdb model: KINGSTON_SHFS37A size: 120.0GB Partition: ID: / size: 110G used: 103G (99%) fs: ext4 RAID: No RAID devices detected - /proc/mdstat and md_mod kernel raid module present Sensors: System Temperatures: cpu: 29.8C mobo: 27.8C gpu: 54.0 Fan Speeds (in rpm): cpu: N/A Info: Processes: 387 Uptime: 5 days Memory: 10035.2/32130.2MB Client: Shell (bash) inxi: 1.9.17 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/iostat.html":{"url":"cmd/stat/iostat.html","title":"iostat","keywords":"","body":"iostat Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/memory/free.html":{"url":"cmd/stat/memory/free.html","title":"free","keywords":"","body":"free 显示系统中空闲和已用的物理内存、交换内存的数量，以及内核使用的缓存区（buffer）和缓存（cache）。 用法 free [option] 选项 选项 描述 -b、--bytes 以字节（B）为单位显示内存数量；默认选项 -m、--mega 以 KB 为单位显示内存数量 -h、--human 以可读形式显示内存数量 以较小单位显示时，会发现每次执行的结果都在变化 字段 CentOS 7+ 和 Ubuntu 16.04+： 列名 描述 total 总内存；源自 /proc/meminfo 的 “MemTotal” 或 “SwapTotal” used 已用内存；used = total - free - buffers - cache free 空闲内存；源自 /proc/meminfo 的 “MemFree” 或 “SwapFree” shared 共享内存；（主要）由 tmpfs 使用的内存；源自 /proc/meminfo 的 “Shmem” buffers 由 Kernel Buffer 占用的内存；源自 /proc/meminfo 的 “Buffers” cache 由 Page Cache 和 Slab 占用的内存；源自 /proc/meminfo 的 “Cached” 与 “Slab” 之和 buff/cache buffers + cache available 评估有多少内存可用于启动新的应用程序；不同于 cache 和 free 字段提供的数据，该字段考虑 page cache，而且并非所有可回收的内存 slab 都将因为项正在使用而被回收；源自 /proc/meminfo 的 MemAvailable Ubuntu 14.04： 列名 描述 total 同上表 used 已用内存；used = total - free free 未被使用的内存；源自 /proc/meminfo 的 “MemFree” 或 “SwapFree” shared 同上表 buffers 同上表 cached 由 Page Cache 占用的内存；源自 /proc/meminfo 的 “Cached” 示例 free -h # Ubuntu 16.04+ | CentOS 7+ $ free -h total used free shared buff/cache available Mem: 1.8G 239M 1.0G 65M 588M 1.3G Swap: 7.0G 0B 7.0G # Ubuntu 14.04 $ free -h total used free shared buffers cached Mem: 31G 11G 19G 162M 1.7G 2.5G -/+ buffers/cache: 7.9G 23G Swap: 19G 0B 19G free -k 对比 /proc/meminfo #x Ubuntu 16.04+ | CentOS 7+ $ free -k && cat /proc/meminfo | grep -E '^Shmem|^Buffers|^Cached|^Slab|^MemAvailable' total used free shared buff/cache available Mem: 1877992 291916 981140 67428 604936 1332172 Swap: 7340028 0 7340028 MemAvailable: 1332264 kB Buffers: 2108 kB # buff/cache = \"Buffers\" + cache = 604936 Cached: 529688 kB # cache = \"Cached\" + \"Slab\" = 602828 Shmem: 67428 kB # \"Shmem\" = shared Slab: 73140 kB # Ubuntu 14.04 $ free -k && cat /proc/meminfo | grep -E '^Shmem|^Buffers|^Cached|^Slab|^MemAvailable' total used free shared buffers cached Mem: 32901336 12603804 20297532 170608 1774068 2583820 -/+ buffers/cache: 8245916 24655420 Swap: 20971516 0 20971516 MemAvailable: 25084356 kB Buffers: 1774068 kB # \"Buffers\" = buffers Cached: 2583820 kB # \"Cached\" = cached Shmem: 170608 kB # \"Shmem\" = shared Slab: 1146684 kB Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/memory/slabtop.html":{"url":"cmd/stat/memory/slabtop.html","title":"slabtop","keywords":"","body":"slabtop 实时显示内核 slab cache 示例 $ sudo slabtop Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/memory/vmstat.html":{"url":"cmd/stat/memory/vmstat.html","title":"vmstat","keywords":"","body":"vmstat 示例 $ vmstat procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 2 0 0 20464092 1772780 2572728 0 0 3 597 6 28 6 22 71 0 0 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/pci/lspci.html":{"url":"cmd/stat/pci/lspci.html","title":"lspci","keywords":"","body":"lspci 查看所有 PCI 设备。 安装 # CentOS（已内置） $ yum install -y pciutils 命令 lspci Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/process/top.html":{"url":"cmd/stat/process/top.html","title":"top","keywords":"","body":"top Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/stat/usb/lsusb.html":{"url":"cmd/stat/usb/lsusb.html","title":"lsusb","keywords":"","body":"lsusb 查看 USB 设备。 安装 # CentOS $ yum install -y usbutils # Ubuntu（已内置） $ apt-get install -y usbutils 命令 lsusb Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/su.html":{"url":"cmd/su.html","title":"su","keywords":"","body":"su 改变 UID 或者称为超级用户。 语法 su [options...] [-] [user [args...]] 「-」 授意 su 启动 login shell，而不是 non-login shell 示例 切换用户 $ su - jins 改变 UID 或者称为超级用户。 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/sudo.html":{"url":"cmd/sudo.html","title":"sudo","keywords":"","body":"sudo 含义 在命令的前面添加 sudo，实际上是以 root 用户的身份来执行该命令。 [jinsyin@node ~]$ whoami # jinsyin [jinsyin@node ~]$ sudo whoami # root 权限检查 判断当前用户是不是 root 用户，或者是否使用了 sudo 命令，除了使用 whoami 命令以外，还可以通过 id 命令来判断。 id 命令 $ id jinsyin uid=1000(jinsyin) gid=1000(jinsyin) groups=1000(jinsyin) $ id -u jinsyin # uid=1000 $ id -g jinsyin # gid=1000 # id root $ sudo id uid=0(root) gid=0(root) groups=0(root) # id -u root $ sudo id -u # uid=0 # id -g root $ sudo id -g # gid=0 root 用户的 UID 和 GID 都是 0 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/syscall/":{"url":"cmd/syscall/","title":"syscall","keywords":"","body":"系统调用 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/syscall/strace.html":{"url":"cmd/syscall/strace.html","title":"strace","keywords":"","body":"strace strace 用于追踪（trace）进程执行过程中调用的系统调用（system calls）以及接收到的信号（signals）。 示例 # 每一行是一个系统调用 # 等号左边是系统调用的名称及其参数 # 等号右边是调用的返回值 $ strace /dev/null execve(\"/bin/cat\", [\"cat\", \"/dev/null\"], [/* 79 vars */]) = 0 brk(0) = 0x7e0000 access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory) access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory) open(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3 fstat(3, {st_mode=S_IFREG|0644, st_size=146460, ...}) = 0 mmap(NULL, 146460, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7efe80d7f000 close(3) = 0 access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory) open(\"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3 read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0P \\2\\0\\0\\0\\0\\0\"..., 832) = 832 fstat(3, {st_mode=S_IFREG|0755, st_size=1857312, ...}) = 0 mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7efe80d7e000 mmap(NULL, 3965632, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7efe807b8000 mprotect(0x7efe80976000, 2097152, PROT_NONE) = 0 mmap(0x7efe80b76000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1be000) = 0x7efe80b76000 mmap(0x7efe80b7c000, 17088, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7efe80b7c000 close(3) = 0 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7efe80d7c000 arch_prctl(ARCH_SET_FS, 0x7efe80d7c740) = 0 mprotect(0x7efe80b76000, 16384, PROT_READ) = 0 mprotect(0x60a000, 4096, PROT_READ) = 0 mprotect(0x7efe80da3000, 4096, PROT_READ) = 0 munmap(0x7efe80d7f000, 146460) = 0 brk(0) = 0x7e0000 brk(0x801000) = 0x801000 open(\"/usr/lib/locale/locale-archive\", O_RDONLY|O_CLOEXEC) = 3 fstat(3, {st_mode=S_IFREG|0644, st_size=7216688, ...}) = 0 mmap(NULL, 7216688, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7efe800d6000 close(3) = 0 fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 25), ...}) = 0 open(\"/dev/null\", O_RDONLY) = 3 fstat(3, {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 3), ...}) = 0 fadvise64(3, 0, 0, POSIX_FADV_SEQUENTIAL) = 0 read(3, \"\", 65536) = 0 close(3) = 0 close(1) = 0 close(2) = 0 exit_group(0) = ? +++ exited with 0 +++ 参考 strace 跟踪进程中的系统调用 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/environment/env.html":{"url":"cmd/system/environment/env.html","title":"env","keywords":"","body":"env PATH PATH 环境变量指定当前用户可以直接命令访问的可执行文件路径，多个路径之间用 : 分割。 # macOS $ echo $PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Applications/Wireshark.app/Contents/MacOS:/Users/in/go/bin:/usr/local/bin:/usr/local/go/bin:/Users/in/go/bin EDITOR EDITOR 环境变量指定当前用户的默认编辑器。 $ export EDITOR=vim Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/environment/export.html":{"url":"cmd/system/environment/export.html","title":"export","keywords":"","body":"export Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/environment/printenv.html":{"url":"cmd/system/environment/printenv.html","title":"printenv","keywords":"","body":"printenv Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/environment/set.html":{"url":"cmd/system/environment/set.html","title":"set","keywords":"","body":"set Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/environment/setenv.html":{"url":"cmd/system/environment/setenv.html","title":"setenv","keywords":"","body":"setenv Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/environment/unset.html":{"url":"cmd/system/environment/unset.html","title":"unset","keywords":"","body":"unset Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/monitoring/":{"url":"cmd/system/monitoring/","title":"monitoring","keywords":"","body":"系统监控 参考 System Monitoring Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/shutdown/":{"url":"cmd/system/shutdown/","title":"shutdown","keywords":"","body":"关机 参考 The boot process in closer look More about shutdowns Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/shutdown/halt.html":{"url":"cmd/system/shutdown/halt.html","title":"halt","keywords":"","body":"halt Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/shutdown/poweroff.html":{"url":"cmd/system/shutdown/poweroff.html","title":"poweroff.md","keywords":"","body":" Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/shutdown/reboot.html":{"url":"cmd/system/shutdown/reboot.html","title":"重启","keywords":"","body":"重启 参考 Rebooting Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/shutdown/shutdown.html":{"url":"cmd/system/shutdown/shutdown.html","title":"shutdown","keywords":"","body":"shutdown 在给定时间关机。 关机步骤 运行 w 查看哪些用户在使用，以及他们在做什么 运行 sync 同步内存数据到磁盘 关机 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/timedatectl.html":{"url":"cmd/system/timedatectl.html","title":"timedatectl","keywords":"","body":"timedatectl 控制系统时间和周期 用法 timedatectl [OPTIONS...] {COMMAND} 用例 用例 描述 timedatectl status 查看系统时间和 RTC 的当前设置 示例 $ timedatectl status Local time: 五 2019-11-22 16:29:10 CST Universal time: 五 2019-11-22 08:29:10 UTC RTC time: 五 2019-11-22 08:29:09 Time zone: Asia/Shanghai (CST, +0800) NTP enabled: yes NTP synchronized: yes RTC in local TZ: no # timedatectl set-local-rtc 0 DST active: n/a Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/uptime.html":{"url":"cmd/system/uptime.html","title":"uptime - 系统运行时间及平均负载","keywords":"","body":"uptime - 系统运行时间及平均负载 示例 # macOS $ uptime 22:43 up 28 days, 37 mins, 4 users, load averages: 2.15 1.86 1.94 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/w.html":{"url":"cmd/system/w.html","title":"w","keywords":"","body":"w w 命令可以查看哪些用户在登录以及他们在做什么。 用户 关机前检查是否有其他用户在使用以及他们在做什么 示例 Linux $ w 10:03:35 up 60 days, 47 min, 6 users, load average: 0.40, 0.47, 0.65 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 192.168.8.220 10:03 1.00s 0.00s 0.00s w root pts/1 192.168.18.219 二15 23:19m 0.09s 0.09s -bash root pts/2 192.168.18.219 三09 17:52m 0.11s 0.11s -bash root pts/3 192.168.18.219 三09 43:01m 11:36 11:36 top root pts/4 192.168.18.219 三09 2days 1:29m 1:28m nethogs root pts/6 192.168.8.220 1211月18 1:19 2.45s 0.47s ssh root@192.168.100.210 macOS $ w 22:44 up 28 days, 38 mins, 8 users, load averages: 2.33 1.93 1.96 USER TTY FROM LOGIN@ IDLE WHAT in console - 15 619 25days - in s001 - 22:44 - -bash in s002 - 22:44 - -bash in s003 - 22:44 - -bash in s005 - 22:44 - -bash _mbsetupuser console - 15 619 25days - in s007 - 22:44 - w in s006 - 22:44 - -bash Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/system/who.html":{"url":"cmd/system/who.html","title":"who","keywords":"","body":"who who 命令可以查看哪些用户在登录。 示例 macOS $ who _mbsetupuser console Jun 15 12:26 in console Jun 15 12:32 in ttys003 Jul 15 10:12 in ttys005 Jul 15 10:45 in ttys015 Jul 10 21:29 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/tail.html":{"url":"cmd/tail.html","title":"tail","keywords":"","body":"tail Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/terminal/":{"url":"cmd/terminal/","title":"terminal","keywords":"","body":"终端（Terminal） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/terminal/screen.html":{"url":"cmd/terminal/screen.html","title":"screen","keywords":"","body":"screen 见 伪终端 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/terminal/stty.html":{"url":"cmd/terminal/stty.html","title":"stty","keywords":"","body":"stty 查看或修改终端属性。 语法 stty [-F DEVICE | --file=DEVICE] [SETTING]... stty [-F DEVICE | --file=DEVICE] [-a|--all] stty [-F DEVICE | --file=DEVICE] [-g|--save] 选项 选项 描述 -a 以可读形式打印所有终端属性 示例 获取终端属性 $ stty -a speed 38400 baud; rows 25; columns 80; line = 0; intr = ^C; quit = ^\\; erase = ^?; kill = ^U; eof = ^D; eol = M-^?; eol2 = M-^?; swtch = ; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0; -parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc ixany imaxbel -iutf8 opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0 isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke 第 1 行：终端的线速（单位：波特率，即单位时间内传输符号的数量）、终端窗口大小、数值形式的行规程（0 代表 N_TTY，即新行规程） 第 2-4 行：终端特殊字符的设定；如 Ctrl-C（^C）代表中断 修改终端属性 # 修改窗口大小 $ stty rows 50 $ stty columns 100 # 修改终端特殊字符的设定 $ stty intr ^L # 启用、关闭 TOSTOP 标志 $ stty tostop $ stty -tostop Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/terminal/tmux.html":{"url":"cmd/terminal/tmux.html","title":"tmux","keywords":"","body":"tmux 见 伪终端 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/tr.html":{"url":"cmd/tr.html","title":"tr","keywords":"","body":"tr Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/type.html":{"url":"cmd/type.html","title":"type","keywords":"","body":"type type COMMAND 用于判断命令的类型。 命令类型 命令类型 描述 可执行文件 ～ shell 内置命令 可以在运行的 shell 进程中执行的命令 别名 ～ 示例 $ type ps ps is /bin/ps $ type ll ll is aliased to `ls -laF' $ type wget wget is /usr/local/bin/wget $ type man man is hashed (/usr/bin/man) Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/uniq.html":{"url":"cmd/uniq.html","title":"uniq","keywords":"","body":"uniq Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/vi.html":{"url":"cmd/vi.html","title":"vi","keywords":"","body":"vi 设置默认编辑器 $ export EDITOR=vim Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/watch.html":{"url":"cmd/watch.html","title":"watch","keywords":"","body":"watch 周期性地运行一个程序，并全屏显示执行结果。 语法： watch [options] command 选项： -n # 间隔时间；默认每 2 秒运行一次 -d # 高亮显示变化 -t # 关闭 watch 命令在顶部输出的时间间隔和当前时间 示例 $ watch -d -t uptime 14:31:37 up 43 days, 5:22, 18 users, load average: 1.18, 1.57, 1.48 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/wc.html":{"url":"cmd/wc.html","title":"wc","keywords":"","body":"wc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"cmd/xargs.html":{"url":"cmd/xargs.html","title":"xargs","keywords":"","body":"xargs 从 stdin 中读取空格（space）、制表符（tab）、新行（newline）以及文件结束符（EOF），并执行参数列表中的命令。 语法 xargs [-0opt] [-E eofstr] [-I replstr [-R replacements]] [-J replstr] [-L number] [-n number [-x]] [-P maxprocs] [-s size] [utility [argument ...]] 示例 # 统计每个 md 文件的字数（其中，/def/fd/0 指代当前进程的标准输入 ） $ find . -name '*.md' | xargs wc -w /dev/fd/0 $ cat /etc/hosts | xargs -I{} ssh root@{} hostname $ find . -type d | xargs chmod 755 # 修改目录的权限 $ find . -type f | xargs chmod 644 # 修改普通文件的权限 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"gnu/awk/":{"url":"gnu/awk/","title":"awk","keywords":"","body":"GNU gawk Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"gnu/bc.html":{"url":"gnu/bc.html","title":"GNU bc","keywords":"","body":"GNU bc Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"gnu/make.html":{"url":"gnu/make.html","title":"GNU make","keywords":"","body":"GNU make Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/aliases/":{"url":"misc/aliases/","title":"aliases","keywords":"","body":"Shell 别名 alias ..=\"cd ..\" alias ~=\"cd ~\" alias -=\"cd -\" alias /=\"cd /\" alias ll=\"ls -hail\" alias md=\"mkdir -p\" alias rd=\"rmdir\" alias cp=\"cp -i\" alias rd=\"rm -r\" alias mkdir=\"mkdir -p\" alias os=\"cat /etc/os-release\" # linux alias sum=\"paste -sd+ - | bc\" # 对列进行求和 alias reload=\"exec ${SHELL} -l\" # Reload the shell (i.e. invoke as a login shell) alias .zshrc=\"vi ~/.zshrc\" alias .bashrc=\"vi ~/.bashrc\" alias zshrc=\"source ~/.zshrc\" alias bashrc=\"source ~/.bashrc\" alias HOME=\"echo $HOME\" alias path=\"echo -e ${PATH//:/\\\\n}\" # Print each PATH entry on a separate line alias PATH=\"echo $PATH\" alias home=\"cd ~\" alias doc=\"cd ~/Documents\" alias down=\"cd ~/Downloads\" alias desk=\"cd ~/Desktop\" alias tmp=\"cd /tmp\" alias opt=\"cd /opt\" alias dev=\"cd /dev\" alias var=\"cd /var\" zsh 默认设置了很多不错的别名 参考 github.com/mathiasbynens/dotfiles Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/configuration.html":{"url":"misc/configuration.html","title":"Shell 配置","keywords":"","body":"Shell 配置 # Preferred editor for local and remote sessions if [[ -n $SSH_CONNECTION ]]; then export EDITOR='vi' else export EDITOR='vim' fi Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/commands.html":{"url":"misc/features/commands.html","title":"Shell 命令","keywords":"","body":"Shell 命令 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/executing-cmd.html":{"url":"misc/features/executing-cmd.html","title":"Shell 执行命令","keywords":"","body":"Shell 执行命令 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/expansions.html":{"url":"misc/features/expansions.html","title":"Shell 扩展","keywords":"","body":"Shell 扩展 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/functions.html":{"url":"misc/features/functions.html","title":"Shell 函数","keywords":"","body":"Shell 函数 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/parameters.html":{"url":"misc/features/parameters.html","title":"Shell 参数","keywords":"","body":"Shell 参数 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/redirections.html":{"url":"misc/features/redirections.html","title":"Shell 重定向","keywords":"","body":"Shell 重定向 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/scripts.html":{"url":"misc/features/scripts.html","title":"Shell 脚本","keywords":"","body":"Shell 脚本 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "},"misc/features/syntax.html":{"url":"misc/features/syntax.html","title":"Shell 语法","keywords":"","body":"Shell 语法 参考 Shell Syntax Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-09 "}}